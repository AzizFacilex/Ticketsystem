/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface EventInterface extends utils.Interface {
  contractName: "Event";
  functions: {
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "event_description()": FunctionFragment;
    "event_start()": FunctionFragment;
    "event_title()": FunctionFragment;
    "event_website()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "imageHash()": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "name()": FunctionFragment;
    "number_tickets()": FunctionFragment;
    "organizer()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "ticket_price()": FunctionFragment;
    "tokenByIndex(uint256)": FunctionFragment;
    "tokenOfOwnerByIndex(address,uint256)": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "purchaseTicket(uint256)": FunctionFragment;
    "setImage(string)": FunctionFragment;
    "transferTicket(address,uint256)": FunctionFragment;
    "isTicketValid(address,uint256)": FunctionFragment;
    "cancelEvent()": FunctionFragment;
    "getOwnersTicket(address)": FunctionFragment;
    "collectPayment()": FunctionFragment;
    "getRefund(uint256)": FunctionFragment;
    "isCanceled()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "event_description",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "event_start",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "event_title",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "event_website",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "imageHash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "number_tickets",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "organizer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ticket_price",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseTicket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setImage", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferTicket",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTicketValid",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelEvent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnersTicket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "collectPayment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRefund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isCanceled",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "event_description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "event_start",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "event_title",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "event_website",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "imageHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "number_tickets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "organizer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ticket_price",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setImage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTicketValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOwnersTicket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRefund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isCanceled", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "PaymentCollected(address,address,uint256)": EventFragment;
    "TicketPurchased(address,uint256,uint256,address)": EventFragment;
    "TicketRefended(address,address,uint256,uint256)": EventFragment;
    "TicketTransfered(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketPurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketRefended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TicketTransfered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; approved: string; tokenId: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  { owner: string; operator: string; approved: boolean }
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export type PaymentCollectedEvent = TypedEvent<
  [string, string, BigNumber],
  { _event: string; _organizer: string; _balance: BigNumber }
>;

export type PaymentCollectedEventFilter =
  TypedEventFilter<PaymentCollectedEvent>;

export type TicketPurchasedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  {
    purchaser: string;
    quanntity: BigNumber;
    date: BigNumber;
    indexedPurchased: string;
  }
>;

export type TicketPurchasedEventFilter = TypedEventFilter<TicketPurchasedEvent>;

export type TicketRefendedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  {
    _event: string;
    _requestedBy: string;
    _ticketId: BigNumber;
    _ticketPrice: BigNumber;
  }
>;

export type TicketRefendedEventFilter = TypedEventFilter<TicketRefendedEvent>;

export type TicketTransferedEvent = TypedEvent<
  [string, string, BigNumber],
  { _from: string; _to: string; _tokenId: BigNumber }
>;

export type TicketTransferedEventFilter =
  TypedEventFilter<TicketTransferedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; tokenId: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Event extends BaseContract {
  contractName: "Event";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    /**
     * Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.
     * @param to address to be approved for the given token ID
     * @param tokenId uint256 ID of the token to be approved
     */
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Gets the balance of the specified address.
     * @param owner address to query the balance of
     * @returns uint256 representing the amount owned by the passed address
     */
    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    event_description(overrides?: CallOverrides): Promise<[string]>;

    event_start(overrides?: CallOverrides): Promise<[BigNumber]>;

    event_title(overrides?: CallOverrides): Promise<[string]>;

    event_website(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.
     * @param tokenId uint256 ID of the token to query the approval of
     * @returns address currently approved for the given token ID
     */
    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    imageHash(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Tells whether an operator is approved by a given owner.
     * @param operator operator address which you want to query the approval of
     * @param owner owner address which you want to query the approval of
     * @returns bool whether the given operator is approved by the given owner
     */
    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Gets the token name.
     * @returns string representing the token name
     */
    name(overrides?: CallOverrides): Promise<[string]>;

    number_tickets(overrides?: CallOverrides): Promise<[BigNumber]>;

    organizer(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Gets the owner of the specified token ID.
     * @param tokenId uint256 ID of the token to query the owner of
     * @returns address currently marked as the owner of the given token ID
     */
    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator
     * @param _data bytes data to send along with a safe transfer check
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.
     * @param approved representing the status of the approval to be set
     * @param to operator address to set the approval
     */
    setApprovalForAll(
      to: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * See `IERC165.supportsInterface`.     * Time complexity O(1), guaranteed to always use less than 30 000 gas.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Gets the token symbol.
     * @returns string representing the token symbol
     */
    symbol(overrides?: CallOverrides): Promise<[string]>;

    ticket_price(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens.
     * @param index uint256 representing the index to be accessed of the tokens list
     * @returns uint256 token ID at the given index of the tokens list
     */
    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Gets the token ID at a given index of the tokens list of the requested owner.
     * @param index uint256 representing the index to be accessed of the requested tokens list
     * @param owner address owning the tokens list to be accessed
     * @returns uint256 token ID at the given index of the tokens list owned by the requested address
     */
    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Returns an URI for a given token ID. Throws if the token ID does not exist. May return an empty string.
     * @param tokenId uint256 ID of the token to query
     */
    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    /**
     * Gets the total amount of tokens stored by the contract.
     * @returns uint256 representing the total amount of tokens
     */
    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    /**
     * Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use `safeTransferFrom` whenever possible. Requires the msg.sender to be the owner, approved, or operator.
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * allows user to purchase ticket for the event
     * @param quantity total amount of ticket the user wishes to purchase maximum amount is 5
     */
    purchaseTicket(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * allows users to upload image of the event
     * @param _imageHash image hash stored o IPFS
     */
    setImage(
      _imageHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * allow ticket holders to transfer ownership of there ticket to other users
     * @param _to address of the reciever
     * @param _tokenId id of the ticket to be transfered
     */
    transferTicket(
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * validated if a given ticket id is owned by the given user
     * @param _owner address of the owner of ticket to be validated
     * @param _tokenId id of the ticket to be validated
     * @returns x boolean value holding the result
     */
    isTicketValid(
      _owner: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * allows event organizers to cancel events they have created
     */
    cancelEvent(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * returns tickets array owned by a given user
     * @param _owner address of the required
     * @returns x arrays of ticket id owned by user
     */
    getOwnersTicket(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    /**
     * lets event organizer get ether collected for tickets sold for the event
     */
    collectPayment(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * returns ether for each ticket the user has incase the event is canceled
     * @param ticket id of the ticket to get refunds for
     */
    getRefund(
      ticket: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    /**
     * lets users check if the event is canceled or not
     * @returns true or false
     */
    isCanceled(overrides?: CallOverrides): Promise<[boolean]>;
  };

  /**
   * Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.
   * @param to address to be approved for the given token ID
   * @param tokenId uint256 ID of the token to be approved
   */
  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Gets the balance of the specified address.
   * @param owner address to query the balance of
   * @returns uint256 representing the amount owned by the passed address
   */
  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  event_description(overrides?: CallOverrides): Promise<string>;

  event_start(overrides?: CallOverrides): Promise<BigNumber>;

  event_title(overrides?: CallOverrides): Promise<string>;

  event_website(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.
   * @param tokenId uint256 ID of the token to query the approval of
   * @returns address currently approved for the given token ID
   */
  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  imageHash(overrides?: CallOverrides): Promise<string>;

  /**
   * Tells whether an operator is approved by a given owner.
   * @param operator operator address which you want to query the approval of
   * @param owner owner address which you want to query the approval of
   * @returns bool whether the given operator is approved by the given owner
   */
  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Gets the token name.
   * @returns string representing the token name
   */
  name(overrides?: CallOverrides): Promise<string>;

  number_tickets(overrides?: CallOverrides): Promise<BigNumber>;

  organizer(overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the owner of the specified token ID.
   * @param tokenId uint256 ID of the token to query the owner of
   * @returns address currently marked as the owner of the given token ID
   */
  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  /**
   * Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator
   * @param from current owner of the token
   * @param to address to receive the ownership of the given token ID
   * @param tokenId uint256 ID of the token to be transferred
   */
  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator
   * @param _data bytes data to send along with a safe transfer check
   * @param from current owner of the token
   * @param to address to receive the ownership of the given token ID
   * @param tokenId uint256 ID of the token to be transferred
   */
  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    _data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.
   * @param approved representing the status of the approval to be set
   * @param to operator address to set the approval
   */
  setApprovalForAll(
    to: string,
    approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * See `IERC165.supportsInterface`.     * Time complexity O(1), guaranteed to always use less than 30 000 gas.
   */
  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Gets the token symbol.
   * @returns string representing the token symbol
   */
  symbol(overrides?: CallOverrides): Promise<string>;

  ticket_price(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens.
   * @param index uint256 representing the index to be accessed of the tokens list
   * @returns uint256 token ID at the given index of the tokens list
   */
  tokenByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Gets the token ID at a given index of the tokens list of the requested owner.
   * @param index uint256 representing the index to be accessed of the requested tokens list
   * @param owner address owning the tokens list to be accessed
   * @returns uint256 token ID at the given index of the tokens list owned by the requested address
   */
  tokenOfOwnerByIndex(
    owner: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns an URI for a given token ID. Throws if the token ID does not exist. May return an empty string.
   * @param tokenId uint256 ID of the token to query
   */
  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  /**
   * Gets the total amount of tokens stored by the contract.
   * @returns uint256 representing the total amount of tokens
   */
  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  /**
   * Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use `safeTransferFrom` whenever possible. Requires the msg.sender to be the owner, approved, or operator.
   * @param from current owner of the token
   * @param to address to receive the ownership of the given token ID
   * @param tokenId uint256 ID of the token to be transferred
   */
  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * allows user to purchase ticket for the event
   * @param quantity total amount of ticket the user wishes to purchase maximum amount is 5
   */
  purchaseTicket(
    quantity: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * allows users to upload image of the event
   * @param _imageHash image hash stored o IPFS
   */
  setImage(
    _imageHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * allow ticket holders to transfer ownership of there ticket to other users
   * @param _to address of the reciever
   * @param _tokenId id of the ticket to be transfered
   */
  transferTicket(
    _to: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * validated if a given ticket id is owned by the given user
   * @param _owner address of the owner of ticket to be validated
   * @param _tokenId id of the ticket to be validated
   * @returns x boolean value holding the result
   */
  isTicketValid(
    _owner: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * allows event organizers to cancel events they have created
   */
  cancelEvent(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * returns tickets array owned by a given user
   * @param _owner address of the required
   * @returns x arrays of ticket id owned by user
   */
  getOwnersTicket(
    _owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  /**
   * lets event organizer get ether collected for tickets sold for the event
   */
  collectPayment(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * returns ether for each ticket the user has incase the event is canceled
   * @param ticket id of the ticket to get refunds for
   */
  getRefund(
    ticket: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  /**
   * lets users check if the event is canceled or not
   * @returns true or false
   */
  isCanceled(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    /**
     * Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.
     * @param to address to be approved for the given token ID
     * @param tokenId uint256 ID of the token to be approved
     */
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Gets the balance of the specified address.
     * @param owner address to query the balance of
     * @returns uint256 representing the amount owned by the passed address
     */
    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    event_description(overrides?: CallOverrides): Promise<string>;

    event_start(overrides?: CallOverrides): Promise<BigNumber>;

    event_title(overrides?: CallOverrides): Promise<string>;

    event_website(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.
     * @param tokenId uint256 ID of the token to query the approval of
     * @returns address currently approved for the given token ID
     */
    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    imageHash(overrides?: CallOverrides): Promise<string>;

    /**
     * Tells whether an operator is approved by a given owner.
     * @param operator operator address which you want to query the approval of
     * @param owner owner address which you want to query the approval of
     * @returns bool whether the given operator is approved by the given owner
     */
    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Gets the token name.
     * @returns string representing the token name
     */
    name(overrides?: CallOverrides): Promise<string>;

    number_tickets(overrides?: CallOverrides): Promise<BigNumber>;

    organizer(overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the owner of the specified token ID.
     * @param tokenId uint256 ID of the token to query the owner of
     * @returns address currently marked as the owner of the given token ID
     */
    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    /**
     * Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator
     * @param _data bytes data to send along with a safe transfer check
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.
     * @param approved representing the status of the approval to be set
     * @param to operator address to set the approval
     */
    setApprovalForAll(
      to: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * See `IERC165.supportsInterface`.     * Time complexity O(1), guaranteed to always use less than 30 000 gas.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Gets the token symbol.
     * @returns string representing the token symbol
     */
    symbol(overrides?: CallOverrides): Promise<string>;

    ticket_price(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens.
     * @param index uint256 representing the index to be accessed of the tokens list
     * @returns uint256 token ID at the given index of the tokens list
     */
    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the token ID at a given index of the tokens list of the requested owner.
     * @param index uint256 representing the index to be accessed of the requested tokens list
     * @param owner address owning the tokens list to be accessed
     * @returns uint256 token ID at the given index of the tokens list owned by the requested address
     */
    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns an URI for a given token ID. Throws if the token ID does not exist. May return an empty string.
     * @param tokenId uint256 ID of the token to query
     */
    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    /**
     * Gets the total amount of tokens stored by the contract.
     * @returns uint256 representing the total amount of tokens
     */
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use `safeTransferFrom` whenever possible. Requires the msg.sender to be the owner, approved, or operator.
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * allows user to purchase ticket for the event
     * @param quantity total amount of ticket the user wishes to purchase maximum amount is 5
     */
    purchaseTicket(
      quantity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * allows users to upload image of the event
     * @param _imageHash image hash stored o IPFS
     */
    setImage(_imageHash: string, overrides?: CallOverrides): Promise<void>;

    /**
     * allow ticket holders to transfer ownership of there ticket to other users
     * @param _to address of the reciever
     * @param _tokenId id of the ticket to be transfered
     */
    transferTicket(
      _to: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * validated if a given ticket id is owned by the given user
     * @param _owner address of the owner of ticket to be validated
     * @param _tokenId id of the ticket to be validated
     * @returns x boolean value holding the result
     */
    isTicketValid(
      _owner: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * allows event organizers to cancel events they have created
     */
    cancelEvent(overrides?: CallOverrides): Promise<void>;

    /**
     * returns tickets array owned by a given user
     * @param _owner address of the required
     * @returns x arrays of ticket id owned by user
     */
    getOwnersTicket(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    /**
     * lets event organizer get ether collected for tickets sold for the event
     */
    collectPayment(overrides?: CallOverrides): Promise<void>;

    /**
     * returns ether for each ticket the user has incase the event is canceled
     * @param ticket id of the ticket to get refunds for
     */
    getRefund(ticket: BigNumberish, overrides?: CallOverrides): Promise<void>;

    /**
     * lets users check if the event is canceled or not
     * @returns true or false
     */
    isCanceled(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      approved?: string | null,
      tokenId?: BigNumberish | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: string | null,
      operator?: string | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "PaymentCollected(address,address,uint256)"(
      _event?: null,
      _organizer?: null,
      _balance?: null
    ): PaymentCollectedEventFilter;
    PaymentCollected(
      _event?: null,
      _organizer?: null,
      _balance?: null
    ): PaymentCollectedEventFilter;

    "TicketPurchased(address,uint256,uint256,address)"(
      purchaser?: null,
      quanntity?: null,
      date?: null,
      indexedPurchased?: string | null
    ): TicketPurchasedEventFilter;
    TicketPurchased(
      purchaser?: null,
      quanntity?: null,
      date?: null,
      indexedPurchased?: string | null
    ): TicketPurchasedEventFilter;

    "TicketRefended(address,address,uint256,uint256)"(
      _event?: null,
      _requestedBy?: null,
      _ticketId?: null,
      _ticketPrice?: null
    ): TicketRefendedEventFilter;
    TicketRefended(
      _event?: null,
      _requestedBy?: null,
      _ticketId?: null,
      _ticketPrice?: null
    ): TicketRefendedEventFilter;

    "TicketTransfered(address,address,uint256)"(
      _from?: null,
      _to?: null,
      _tokenId?: null
    ): TicketTransferedEventFilter;
    TicketTransfered(
      _from?: null,
      _to?: null,
      _tokenId?: null
    ): TicketTransferedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      tokenId?: BigNumberish | null
    ): TransferEventFilter;
  };

  estimateGas: {
    /**
     * Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.
     * @param to address to be approved for the given token ID
     * @param tokenId uint256 ID of the token to be approved
     */
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Gets the balance of the specified address.
     * @param owner address to query the balance of
     * @returns uint256 representing the amount owned by the passed address
     */
    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    event_description(overrides?: CallOverrides): Promise<BigNumber>;

    event_start(overrides?: CallOverrides): Promise<BigNumber>;

    event_title(overrides?: CallOverrides): Promise<BigNumber>;

    event_website(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.
     * @param tokenId uint256 ID of the token to query the approval of
     * @returns address currently approved for the given token ID
     */
    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    imageHash(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Tells whether an operator is approved by a given owner.
     * @param operator operator address which you want to query the approval of
     * @param owner owner address which you want to query the approval of
     * @returns bool whether the given operator is approved by the given owner
     */
    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the token name.
     * @returns string representing the token name
     */
    name(overrides?: CallOverrides): Promise<BigNumber>;

    number_tickets(overrides?: CallOverrides): Promise<BigNumber>;

    organizer(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the owner of the specified token ID.
     * @param tokenId uint256 ID of the token to query the owner of
     * @returns address currently marked as the owner of the given token ID
     */
    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator
     * @param _data bytes data to send along with a safe transfer check
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.
     * @param approved representing the status of the approval to be set
     * @param to operator address to set the approval
     */
    setApprovalForAll(
      to: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * See `IERC165.supportsInterface`.     * Time complexity O(1), guaranteed to always use less than 30 000 gas.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the token symbol.
     * @returns string representing the token symbol
     */
    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    ticket_price(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens.
     * @param index uint256 representing the index to be accessed of the tokens list
     * @returns uint256 token ID at the given index of the tokens list
     */
    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the token ID at a given index of the tokens list of the requested owner.
     * @param index uint256 representing the index to be accessed of the requested tokens list
     * @param owner address owning the tokens list to be accessed
     * @returns uint256 token ID at the given index of the tokens list owned by the requested address
     */
    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns an URI for a given token ID. Throws if the token ID does not exist. May return an empty string.
     * @param tokenId uint256 ID of the token to query
     */
    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Gets the total amount of tokens stored by the contract.
     * @returns uint256 representing the total amount of tokens
     */
    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use `safeTransferFrom` whenever possible. Requires the msg.sender to be the owner, approved, or operator.
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * allows user to purchase ticket for the event
     * @param quantity total amount of ticket the user wishes to purchase maximum amount is 5
     */
    purchaseTicket(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * allows users to upload image of the event
     * @param _imageHash image hash stored o IPFS
     */
    setImage(
      _imageHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * allow ticket holders to transfer ownership of there ticket to other users
     * @param _to address of the reciever
     * @param _tokenId id of the ticket to be transfered
     */
    transferTicket(
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * validated if a given ticket id is owned by the given user
     * @param _owner address of the owner of ticket to be validated
     * @param _tokenId id of the ticket to be validated
     * @returns x boolean value holding the result
     */
    isTicketValid(
      _owner: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * allows event organizers to cancel events they have created
     */
    cancelEvent(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * returns tickets array owned by a given user
     * @param _owner address of the required
     * @returns x arrays of ticket id owned by user
     */
    getOwnersTicket(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * lets event organizer get ether collected for tickets sold for the event
     */
    collectPayment(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * returns ether for each ticket the user has incase the event is canceled
     * @param ticket id of the ticket to get refunds for
     */
    getRefund(
      ticket: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    /**
     * lets users check if the event is canceled or not
     * @returns true or false
     */
    isCanceled(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    /**
     * Approves another address to transfer the given token ID The zero address indicates there is no approved address. There can only be one approved address per token at a given time. Can only be called by the token owner or an approved operator.
     * @param to address to be approved for the given token ID
     * @param tokenId uint256 ID of the token to be approved
     */
    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the balance of the specified address.
     * @param owner address to query the balance of
     * @returns uint256 representing the amount owned by the passed address
     */
    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    event_description(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    event_start(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    event_title(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    event_website(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the approved address for a token ID, or zero if no address set Reverts if the token ID does not exist.
     * @param tokenId uint256 ID of the token to query the approval of
     * @returns address currently approved for the given token ID
     */
    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    imageHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Tells whether an operator is approved by a given owner.
     * @param operator operator address which you want to query the approval of
     * @param owner owner address which you want to query the approval of
     * @returns bool whether the given operator is approved by the given owner
     */
    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the token name.
     * @returns string representing the token name
     */
    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    number_tickets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    organizer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the owner of the specified token ID.
     * @param tokenId uint256 ID of the token to query the owner of
     * @returns address currently marked as the owner of the given token ID
     */
    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Safely transfers the ownership of a given token ID to another address If the target address is a contract, it must implement `onERC721Received`, which is called upon a safe transfer, and return the magic value `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise, the transfer is reverted. Requires the msg.sender to be the owner, approved, or operator
     * @param _data bytes data to send along with a safe transfer check
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      _data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Sets or unsets the approval of a given operator An operator is allowed to transfer all tokens of the sender on their behalf.
     * @param approved representing the status of the approval to be set
     * @param to operator address to set the approval
     */
    setApprovalForAll(
      to: string,
      approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * See `IERC165.supportsInterface`.     * Time complexity O(1), guaranteed to always use less than 30 000 gas.
     */
    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the token symbol.
     * @returns string representing the token symbol
     */
    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticket_price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Gets the token ID at a given index of all the tokens in this contract Reverts if the index is greater or equal to the total number of tokens.
     * @param index uint256 representing the index to be accessed of the tokens list
     * @returns uint256 token ID at the given index of the tokens list
     */
    tokenByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the token ID at a given index of the tokens list of the requested owner.
     * @param index uint256 representing the index to be accessed of the requested tokens list
     * @param owner address owning the tokens list to be accessed
     * @returns uint256 token ID at the given index of the tokens list owned by the requested address
     */
    tokenOfOwnerByIndex(
      owner: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns an URI for a given token ID. Throws if the token ID does not exist. May return an empty string.
     * @param tokenId uint256 ID of the token to query
     */
    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Gets the total amount of tokens stored by the contract.
     * @returns uint256 representing the total amount of tokens
     */
    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Transfers the ownership of a given token ID to another address. Usage of this method is discouraged, use `safeTransferFrom` whenever possible. Requires the msg.sender to be the owner, approved, or operator.
     * @param from current owner of the token
     * @param to address to receive the ownership of the given token ID
     * @param tokenId uint256 ID of the token to be transferred
     */
    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * allows user to purchase ticket for the event
     * @param quantity total amount of ticket the user wishes to purchase maximum amount is 5
     */
    purchaseTicket(
      quantity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * allows users to upload image of the event
     * @param _imageHash image hash stored o IPFS
     */
    setImage(
      _imageHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * allow ticket holders to transfer ownership of there ticket to other users
     * @param _to address of the reciever
     * @param _tokenId id of the ticket to be transfered
     */
    transferTicket(
      _to: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * validated if a given ticket id is owned by the given user
     * @param _owner address of the owner of ticket to be validated
     * @param _tokenId id of the ticket to be validated
     * @returns x boolean value holding the result
     */
    isTicketValid(
      _owner: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * allows event organizers to cancel events they have created
     */
    cancelEvent(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * returns tickets array owned by a given user
     * @param _owner address of the required
     * @returns x arrays of ticket id owned by user
     */
    getOwnersTicket(
      _owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * lets event organizer get ether collected for tickets sold for the event
     */
    collectPayment(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * returns ether for each ticket the user has incase the event is canceled
     * @param ticket id of the ticket to get refunds for
     */
    getRefund(
      ticket: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * lets users check if the event is canceled or not
     * @returns true or false
     */
    isCanceled(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
